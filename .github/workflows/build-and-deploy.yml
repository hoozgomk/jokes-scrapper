name: Build, Push, and Deploy to VM

on:
  push:
    branches: [ "dev" ]
  workflow_dispatch:

env:
  PROJECT_ID: jokes-scrapper
  GAR_LOCATION: us-central1
  SERVICE: jokes-scrapper
  REGION: us-central1
  ZONE: us-central1-a
  VM_INSTANCE_NAME: jokes-scrapper-vm

jobs:
  deploy:
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_AR_SA_KEY }}'

      - name: Docker Auth
        id: docker-auth
        uses: docker/login-action@v3
        with:
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"
          username: _json_key
          password: ${{ secrets.GCP_AR_SA_KEY }}

      - name: Get VM External IP
        id: get_ip
        run: |
          EXTERNAL_IP=$(gcloud compute instances describe $VM_INSTANCE_NAME --zone $ZONE --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "::set-output name=external_ip::$EXTERNAL_IP"

      - name: Display VM External IP
        run: |
          echo "VM External IP: ${{ steps.get_ip.outputs.external_ip }}"

      - name: Build and Push Container
        run: |
#          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}" ./
#          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}"
#          docker save -o /tmp/jokes-scrapper.tar "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}"
#          chmod 777 /tmp/jokes-scrapper.tar
          touch /tmp/test-file.txt
          ls -l /tmp

#      - name: Set up Google Cloud SDK
#        uses: google-github-actions/setup-gcloud@v2
#        with:
#          project_id: ${{ env.PROJECT_ID }}
#          service_account_key: ${{ secrets.GCP_AR_SA_KEY }}
#          export_default_credentials: true

#      - name: Log in to VM and verify
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ steps.get_ip.outputs.external_ip }}
#          username: github
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          script: |
#            echo "Logged in successfully"

      - name: Copy Docker image to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ steps.get_ip.outputs.external_ip }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "/tmp/test-file.txt"
          target: "/tmp"

      - name: Load Docker image on VM
        run: |
          ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} \
          'docker load -i /tmp/jokes-scrapper.tar'

#      - name: Authenticate to Artifact Registry from VM
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ steps.get_ip.outputs.external_ip }}
#          username: github
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          envs: AR_JSON=${{ secrets.GCP_AR_SA_KEY }}
#          script: |
#            echo "$AR_JSON" > ar_key.json
#            docker login -u _json_key --password "$(cat ar_key.json)" us-central1-docker.pkg.dev/jokes-scrapper

      - name: Run Container on VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.get_ip.outputs.external_ip }}
          username: github
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker pull "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}"
            docker run -d -p 8000:8000 "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}"




name: Build, Push, and Deploy to VM

on:
  push:
    branches: [ "dev", "master" ]
  workflow_dispatch:

env:
  PROJECT_ID: jokes-scrapper
  GAR_LOCATION: us-central1
  SERVICE: jokes-scrapper
  REGION: us-central1
  ZONE: us-central1-a
  VM_INSTANCE_NAME: jokes-scrapper-vm

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_AR_SA_KEY }}'

      - name: Docker Auth
        id: docker-auth
        uses: docker/login-action@v3
        with:
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"
          username: _json_key
          password: ${{ secrets.GCP_AR_SA_KEY }}

      - name: Get VM External IP
        id: get_ip
        run: |
          EXTERNAL_IP=$(gcloud compute instances describe $VM_INSTANCE_NAME --zone $ZONE --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "::set-output name=external_ip::$EXTERNAL_IP"

      - name: Build and Push Container
        run: |
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}"

      - name: Log in to VM and verify
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.get_ip.outputs.external_ip }}
          username: github
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Logged in successfully"

      - name: Run Container on VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.get_ip.outputs.external_ip }}
          username: github
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker pull "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}"
            docker stop $(docker ps -aq)
            docker container prune --force
            docker run -d -p 8000:8000 "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}"



